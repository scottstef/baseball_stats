name: Lint and Test Coverage
on:
  push:
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'  # Change to your Python version

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install flake8 pytest pytest-cov

      - name: Run flake8
        run: flake8 --max-line-length=120 . > lint_results.txt  || (cat lint_results.txt && exit 1)

      - name: Send linting results to Datadog
        if: always()  # <-- Important: Always run, even if flake8 failed
        run: |
          LINT_ERRORS=$(grep -c "E" lint_results.txt || echo 0)  # Default to 0 if grep fails
          LINT_WARNINGS=$(grep -c "W" lint_results.txt || echo 0)

          # Print the data being sent for debugging
          echo "Sending the following data to Datadog API:"
          echo "Errors: $LINT_ERRORS, Warnings: $LINT_WARNINGS"

          # Datadog API request
          response=$(curl -s -w "%{http_code}" -o response.json -X POST "https://api.us5.datadoghq.com/api/v1/series" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.BASSEBALL_STATS_API }}" \
            -H "DD-APPLICATION-KEY: ${{ secrets.BASEBALL_LINTING_DATADOG }}" \
            -d "{
              \"series\": [
                {
                  \"metric\": \"linting.errors\",
                  \"points\": [[ $(date +%s), $LINT_ERRORS ]],
                  \"type\": \"gauge\",
                  \"tags\": [\"repo:baseball-stats\"]
                },
                {
                  \"metric\": \"linting.warnings\",
                  \"points\": [[ $(date +%s), $LINT_WARNINGS ]],
                  \"type\": \"gauge\",
                  \"tags\": [\"repo:baseball-stats\"]
                }
              ]
            }")

          # Check if the response code is 200 (OK)
          if [[ "$response" =~ ^2 ]]; then
            echo "Successfully sent linting data to Datadog."
          else
            echo "Failed to send data to Datadog. HTTP response code: $response"
            cat response.json
            exit 1
          fi

      - name: Validate Datadog API keys
        run: |
          python data_dog_api_check.py
        env:
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_APP_KEY: ${{ secrets.DD_APP_KEY }}

      - name: Upload linting results
        uses: actions/upload-artifact@v4
        with:
          name: lint_results
          path: lint_results.txt

      - name: Run pytest
        run: pytest --maxfail=1

      - name: Run Tests with Coverage
        run: |
          pytest --cov --cov-branch --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # Set this up in GitHub secrets
          slug: scottstef/baseball_stats
